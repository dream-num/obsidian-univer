import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from 'fs';
// import path from "path";

const banner =
	`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const rebuildPlugin = {
	name: "rebuild-handler",
	setup(build) {
		build.onEnd(async () => {
			await fs.promises.rename("main.css", "styles.css");
			// await fs.promises.copyFile(
			// 	path.join(path.resolve(), "manifest.json"),
			// 	path.join(path.resolve(), "dist", "manifest.json")
			// );
		});
	},
};


const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	plugins: [rebuildPlugin],
	// plugins: [
	// 	{
	// 		name: 'inline-css',
	// 		setup(build) {
	// 			build.onLoad({ filter: /\.css$/ }, async (args) => {
	// 				const contents = await fs.promises.readFile(args.path, 'utf8');
	// 				return {
	// 					contents: `const css = ${JSON.stringify(contents)}; export default css;`,
	// 					loader: 'js',
	// 				};
	// 			});
	// 		},
	// 	}
	// ],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { promises as fs } from 'fs';

const banner =
	`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const rebuildPlugin = {
	name: "rebuild-handler",
	setup(build) {
		build.onEnd(async () => {
			try {
				await fs.writeFile('styles.css', '')
				const mainCssContent = await fs.readFile("main.css", "utf-8");
				await fs.appendFile('styles.css', mainCssContent)

				const customCssContent = await fs.readFile("custom.css", "utf-8");
				await fs.appendFile('styles.css', customCssContent)

				console.log('styles.css has been updated')

			} catch (error) {
				console.error('build styles.css failed', error)
			}

		});
	},
};


const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	plugins: [rebuildPlugin],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}